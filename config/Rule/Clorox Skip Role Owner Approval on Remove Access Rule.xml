<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Clorox Skip Role Owner Approval on Remove Access Rule">
  <Source>
<![CDATA[
		import sailpoint.object.ProvisioningPlan;
		import sailpoint.object.ProvisioningPlan.AccountRequest;
		import sailpoint.object.ProvisioningPlan.AttributeRequest;
		import org.apache.log4j.Logger;  
		import org.apache.log4j.Level;  
		import sailpoint.object.Bundle;
		import sailpoint.tools.Util;
		import sailpoint.object.Bundle;
		import sailpoint.object.ApprovalItem;	
		import sailpoint.object.ManagedAttribute;
		import sailpoint.object.QueryOptions;
		import sailpoint.object.Filter;
		import sailpoint.services.ServicesUtil;
		import sailpoint.object.Identity;
		import sailpoint.object.ApprovalItem;
		import sailpoint.object.IdentityRequest;
		import java.util.Map;
		import sailpoint.object.Custom;

		Logger log = Logger.getLogger("rapidapponboarding.rules");
		log.debug("Inside myACCESS Skip Role Owner Approval Rule: ");
		
		Custom customObject = context.getObjectByName(Custom.class, "Clorox SMART Application with Secondary Approval");
		List smartApplications = customObject.getList("Applications");
		Map smartApplicationOwners =customObject.get("ApplicationOwner");

		//establish the default resultMap to return
		Map resultMap = new HashMap();
		//if its a remove don't do approval, return the default
		String itemOp = item.getOperation();
		log.debug(" Operation " + itemOp);
		if(itemOp != null && itemOp.equalsIgnoreCase("Remove") )   {
			resultMap.put("ApprovalRequired","false");  
		}
		else {    							
			String appName = item.getApplicationName();
			log.debug("Application Name " + appName);
			// If the approval item contains a role, then check the role's appName extended attribute for the application name  
			if (item.getName() != null && (item.getName().equalsIgnoreCase(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES) || item.getName().equalsIgnoreCase(ProvisioningPlan.ATT_IIQ_DETECTED_ROLES)) &&item.getDisplayName() != null) {
				String roleName = "";
				if (item.getValue() instanceof List) {
					if (((List) item.getValue()).size() > 0) {
						roleName = ((List) item.getValue()).get(0).toString();
					}
				}
				else {
					roleName = item.getValue().toString();
				}
				log.debug(" Role Name :" + roleName);    
				Bundle role = context.getObjectByName(Bundle.class,roleName);
				if (role != null) {
					isRole = true;
					appName = (String) role.getAttribute("appName");
					log.debug(" App Name " + appName);
					String approvers = "";    
					if(smartApplications.contains(appName)) {
						resultMap.put("ApprovalRequired","true");
						approvers = smartApplicationOwners.get(appName);                
						resultMap.put("Approvers", approvers);
					}
				}  
			}
		}	
		log.debug(" map " + resultMap.toString());  
		return resultMap;
 
    ]]>
  </Source>
</Rule>
